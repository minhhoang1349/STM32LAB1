
EX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800067c  0800067c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800067c  0800067c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800067c  0800067c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800067c  0800067c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000680  08000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000684  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000004  08000688  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000688  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006741  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e47  00000000  00000000  0002676e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  000275b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  00027d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d8c  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007840  00000000  00000000  0003e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081785  00000000  00000000  00045a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c71b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000c7204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000664 	.word	0x08000664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000664 	.word	0x08000664

0800014c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
    unsigned short led_st = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	81fb      	strh	r3, [r7, #14]
    struct s_timer timer;
	set_timer(&timer, TIME_ON);
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	21c8      	movs	r1, #200	; 0xc8
 800015a:	4618      	mov	r0, r3
 800015c:	f000 f838 	bl	80001d0 <set_timer>
	while (1) {
		switch (led_st) {
 8000160:	89fb      	ldrh	r3, [r7, #14]
 8000162:	2b01      	cmp	r3, #1
 8000164:	d114      	bne.n	8000190 <main+0x44>
		case LED_ON:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000166:	2201      	movs	r2, #1
 8000168:	2120      	movs	r1, #32
 800016a:	4818      	ldr	r0, [pc, #96]	; (80001cc <main+0x80>)
 800016c:	f000 f8f6 	bl	800035c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000170:	2200      	movs	r2, #0
 8000172:	2140      	movs	r1, #64	; 0x40
 8000174:	4815      	ldr	r0, [pc, #84]	; (80001cc <main+0x80>)
 8000176:	f000 f8f1 	bl	800035c <HAL_GPIO_WritePin>
			if (!timer.st) {
 800017a:	793b      	ldrb	r3, [r7, #4]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d11c      	bne.n	80001ba <main+0x6e>
				led_st = LED_OFF;
 8000180:	2300      	movs	r3, #0
 8000182:	81fb      	strh	r3, [r7, #14]
				set_timer(&timer, TIME_OFF);
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	21c8      	movs	r1, #200	; 0xc8
 8000188:	4618      	mov	r0, r3
 800018a:	f000 f821 	bl	80001d0 <set_timer>
			}
			break;
 800018e:	e014      	b.n	80001ba <main+0x6e>
		default:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000190:	2200      	movs	r2, #0
 8000192:	2120      	movs	r1, #32
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <main+0x80>)
 8000196:	f000 f8e1 	bl	800035c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800019a:	2201      	movs	r2, #1
 800019c:	2140      	movs	r1, #64	; 0x40
 800019e:	480b      	ldr	r0, [pc, #44]	; (80001cc <main+0x80>)
 80001a0:	f000 f8dc 	bl	800035c <HAL_GPIO_WritePin>
			if (!timer.st) {
 80001a4:	793b      	ldrb	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d108      	bne.n	80001bc <main+0x70>
				led_st = LED_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	81fb      	strh	r3, [r7, #14]
				set_timer(&timer, TIME_ON);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	21c8      	movs	r1, #200	; 0xc8
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 f80c 	bl	80001d0 <set_timer>
 80001b8:	e000      	b.n	80001bc <main+0x70>
			break;
 80001ba:	bf00      	nop
			}
		}
		run_timer(&timer);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 f816 	bl	80001f0 <run_timer>
		HAL_Delay(10);
 80001c4:	200a      	movs	r0, #10
 80001c6:	f000 f8a5 	bl	8000314 <HAL_Delay>
		switch (led_st) {
 80001ca:	e7c9      	b.n	8000160 <main+0x14>
 80001cc:	40010800 	.word	0x40010800

080001d0 <set_timer>:
#include"software_timer.h"
void init_timer(struct s_timer *timer) {
	timer->st = 0;
	timer->time = 0;
}
void set_timer(struct s_timer *timer, const unsigned long time) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
	timer->time = time;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	683a      	ldr	r2, [r7, #0]
 80001de:	605a      	str	r2, [r3, #4]
	timer->st = 1;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <run_timer>:
void run_timer(struct s_timer *timer) {
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if (timer->time > 0) {
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d00b      	beq.n	8000218 <run_timer+0x28>
		timer->time--;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	605a      	str	r2, [r3, #4]
		if (timer->time < 1) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d102      	bne.n	8000218 <run_timer+0x28>
			timer->st = 0;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr

08000222 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000226:	e7fe      	b.n	8000226 <NMI_Handler+0x4>

08000228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800022c:	e7fe      	b.n	800022c <HardFault_Handler+0x4>

0800022e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000232:	e7fe      	b.n	8000232 <MemManage_Handler+0x4>

08000234 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <BusFault_Handler+0x4>

0800023a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800023e:	e7fe      	b.n	800023e <UsageFault_Handler+0x4>

08000240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000268:	f000 f838 	bl	80002dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <TIM2_IRQHandler+0x10>)
 8000276:	f000 f889 	bl	800038c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000020 	.word	0x20000020

08000284 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000290:	f7ff fff8 	bl	8000284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000296:	490c      	ldr	r1, [pc, #48]	; (80002c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002ac:	4c09      	ldr	r4, [pc, #36]	; (80002d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ba:	f000 f9af 	bl	800061c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff45 	bl	800014c <main>
  bx lr
 80002c2:	4770      	bx	lr
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002cc:	08000684 	.word	0x08000684
  ldr r2, =_sbss
 80002d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002d4:	2000006c 	.word	0x2000006c

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <HAL_IncTick+0x1c>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <HAL_IncTick+0x20>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4413      	add	r3, r2
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x20>)
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000068 	.word	0x20000068

08000300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  return uwTick;
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <HAL_GetTick+0x10>)
 8000306:	681b      	ldr	r3, [r3, #0]
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000068 	.word	0x20000068

08000314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800031c:	f7ff fff0 	bl	8000300 <HAL_GetTick>
 8000320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032c:	d005      	beq.n	800033a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <HAL_Delay+0x44>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	461a      	mov	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4413      	add	r3, r2
 8000338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800033a:	bf00      	nop
 800033c:	f7ff ffe0 	bl	8000300 <HAL_GetTick>
 8000340:	4602      	mov	r2, r0
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	429a      	cmp	r2, r3
 800034a:	d8f7      	bhi.n	800033c <HAL_Delay+0x28>
  {
  }
}
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000

0800035c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
 8000368:	4613      	mov	r3, r2
 800036a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800036c:	787b      	ldrb	r3, [r7, #1]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000372:	887a      	ldrh	r2, [r7, #2]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000378:	e003      	b.n	8000382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037a:	887b      	ldrh	r3, [r7, #2]
 800037c:	041a      	lsls	r2, r3, #16
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	611a      	str	r2, [r3, #16]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	691b      	ldr	r3, [r3, #16]
 800039a:	f003 0302 	and.w	r3, r3, #2
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d122      	bne.n	80003e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	f003 0302 	and.w	r3, r3, #2
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d11b      	bne.n	80003e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f06f 0202 	mvn.w	r2, #2
 80003b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2201      	movs	r2, #1
 80003be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0303 	and.w	r3, r3, #3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f000 f8f6 	bl	80005c0 <HAL_TIM_IC_CaptureCallback>
 80003d4:	e005      	b.n	80003e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f000 f8e9 	bl	80005ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f8f8 	bl	80005d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d122      	bne.n	800043c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	2b04      	cmp	r3, #4
 8000402:	d11b      	bne.n	800043c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f06f 0204 	mvn.w	r2, #4
 800040c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2202      	movs	r2, #2
 8000412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800041e:	2b00      	cmp	r3, #0
 8000420:	d003      	beq.n	800042a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 f8cc 	bl	80005c0 <HAL_TIM_IC_CaptureCallback>
 8000428:	e005      	b.n	8000436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f8bf 	bl	80005ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f8ce 	bl	80005d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f003 0308 	and.w	r3, r3, #8
 8000446:	2b08      	cmp	r3, #8
 8000448:	d122      	bne.n	8000490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	2b08      	cmp	r3, #8
 8000456:	d11b      	bne.n	8000490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f06f 0208 	mvn.w	r2, #8
 8000460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2204      	movs	r2, #4
 8000466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 0303 	and.w	r3, r3, #3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d003      	beq.n	800047e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f8a2 	bl	80005c0 <HAL_TIM_IC_CaptureCallback>
 800047c:	e005      	b.n	800048a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f895 	bl	80005ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f8a4 	bl	80005d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	691b      	ldr	r3, [r3, #16]
 8000496:	f003 0310 	and.w	r3, r3, #16
 800049a:	2b10      	cmp	r3, #16
 800049c:	d122      	bne.n	80004e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	2b10      	cmp	r3, #16
 80004aa:	d11b      	bne.n	80004e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f06f 0210 	mvn.w	r2, #16
 80004b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2208      	movs	r2, #8
 80004ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d003      	beq.n	80004d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f878 	bl	80005c0 <HAL_TIM_IC_CaptureCallback>
 80004d0:	e005      	b.n	80004de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f86b 	bl	80005ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f87a 	bl	80005d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10e      	bne.n	8000510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d107      	bne.n	8000510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f06f 0201 	mvn.w	r2, #1
 8000508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 f846 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	2b80      	cmp	r3, #128	; 0x80
 800051c:	d10e      	bne.n	800053c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000528:	2b80      	cmp	r3, #128	; 0x80
 800052a:	d107      	bne.n	800053c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f866 	bl	8000608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000546:	2b40      	cmp	r3, #64	; 0x40
 8000548:	d10e      	bne.n	8000568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000554:	2b40      	cmp	r3, #64	; 0x40
 8000556:	d107      	bne.n	8000568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f83e 	bl	80005e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	f003 0320 	and.w	r3, r3, #32
 8000572:	2b20      	cmp	r3, #32
 8000574:	d10e      	bne.n	8000594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	2b20      	cmp	r3, #32
 8000582:	d107      	bne.n	8000594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f06f 0220 	mvn.w	r2, #32
 800058c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f831 	bl	80005f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <__libc_init_array>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	2600      	movs	r6, #0
 8000620:	4d0c      	ldr	r5, [pc, #48]	; (8000654 <__libc_init_array+0x38>)
 8000622:	4c0d      	ldr	r4, [pc, #52]	; (8000658 <__libc_init_array+0x3c>)
 8000624:	1b64      	subs	r4, r4, r5
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	42a6      	cmp	r6, r4
 800062a:	d109      	bne.n	8000640 <__libc_init_array+0x24>
 800062c:	f000 f81a 	bl	8000664 <_init>
 8000630:	2600      	movs	r6, #0
 8000632:	4d0a      	ldr	r5, [pc, #40]	; (800065c <__libc_init_array+0x40>)
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <__libc_init_array+0x44>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	42a6      	cmp	r6, r4
 800063c:	d105      	bne.n	800064a <__libc_init_array+0x2e>
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f855 3b04 	ldr.w	r3, [r5], #4
 8000644:	4798      	blx	r3
 8000646:	3601      	adds	r6, #1
 8000648:	e7ee      	b.n	8000628 <__libc_init_array+0xc>
 800064a:	f855 3b04 	ldr.w	r3, [r5], #4
 800064e:	4798      	blx	r3
 8000650:	3601      	adds	r6, #1
 8000652:	e7f2      	b.n	800063a <__libc_init_array+0x1e>
 8000654:	0800067c 	.word	0x0800067c
 8000658:	0800067c 	.word	0x0800067c
 800065c:	0800067c 	.word	0x0800067c
 8000660:	08000680 	.word	0x08000680

08000664 <_init>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	bf00      	nop
 8000668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066a:	bc08      	pop	{r3}
 800066c:	469e      	mov	lr, r3
 800066e:	4770      	bx	lr

08000670 <_fini>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr
