
EX2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000004  080006e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080006e0  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006741  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e47  00000000  00000000  0002676e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  000275b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  00027d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d98  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007857  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817b1  00000000  00000000  00045a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000c7254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080006bc 	.word	0x080006bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080006bc 	.word	0x080006bc

0800014c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
    unsigned short led_st = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	81fb      	strh	r3, [r7, #14]
    struct s_timer timer;
	set_timer(&timer, TIME_RED);
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800015c:	4618      	mov	r0, r3
 800015e:	f000 f863 	bl	8000228 <set_timer>
	while (1) {
		switch (led_st) {
 8000162:	89fb      	ldrh	r3, [r7, #14]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d002      	beq.n	800016e <main+0x22>
 8000168:	2b01      	cmp	r3, #1
 800016a:	d01b      	beq.n	80001a4 <main+0x58>
 800016c:	e034      	b.n	80001d8 <main+0x8c>
		case LED_RED_ON:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2120      	movs	r1, #32
 8000172:	482c      	ldr	r0, [pc, #176]	; (8000224 <main+0xd8>)
 8000174:	f000 f91e 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000178:	2201      	movs	r2, #1
 800017a:	2140      	movs	r1, #64	; 0x40
 800017c:	4829      	ldr	r0, [pc, #164]	; (8000224 <main+0xd8>)
 800017e:	f000 f919 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	2180      	movs	r1, #128	; 0x80
 8000186:	4827      	ldr	r0, [pc, #156]	; (8000224 <main+0xd8>)
 8000188:	f000 f914 	bl	80003b4 <HAL_GPIO_WritePin>
			if (!timer.st) {
 800018c:	793b      	ldrb	r3, [r7, #4]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d13d      	bne.n	800020e <main+0xc2>
				led_st = LED_GREEN_ON;
 8000192:	2301      	movs	r3, #1
 8000194:	81fb      	strh	r3, [r7, #14]
				set_timer(&timer, TIME_GREEN);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f843 	bl	8000228 <set_timer>
			}
			break;
 80001a2:	e034      	b.n	800020e <main+0xc2>
		case LED_GREEN_ON:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2120      	movs	r1, #32
 80001a8:	481e      	ldr	r0, [pc, #120]	; (8000224 <main+0xd8>)
 80001aa:	f000 f903 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80001ae:	2201      	movs	r2, #1
 80001b0:	2140      	movs	r1, #64	; 0x40
 80001b2:	481c      	ldr	r0, [pc, #112]	; (8000224 <main+0xd8>)
 80001b4:	f000 f8fe 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	4819      	ldr	r0, [pc, #100]	; (8000224 <main+0xd8>)
 80001be:	f000 f8f9 	bl	80003b4 <HAL_GPIO_WritePin>
			if (!timer.st) {
 80001c2:	793b      	ldrb	r3, [r7, #4]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d124      	bne.n	8000212 <main+0xc6>
				led_st = LED_YELLOW_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	81fb      	strh	r3, [r7, #14]
				set_timer(&timer, TIME_YELLOW);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	21c8      	movs	r1, #200	; 0xc8
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f829 	bl	8000228 <set_timer>
			}
			break;
 80001d6:	e01c      	b.n	8000212 <main+0xc6>
		default:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	4811      	ldr	r0, [pc, #68]	; (8000224 <main+0xd8>)
 80001de:	f000 f8e9 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	480f      	ldr	r0, [pc, #60]	; (8000224 <main+0xd8>)
 80001e8:	f000 f8e4 	bl	80003b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2180      	movs	r1, #128	; 0x80
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0xd8>)
 80001f2:	f000 f8df 	bl	80003b4 <HAL_GPIO_WritePin>
			if (!timer.st) {
 80001f6:	793b      	ldrb	r3, [r7, #4]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d10b      	bne.n	8000214 <main+0xc8>
				led_st = LED_RED_ON;
 80001fc:	2300      	movs	r3, #0
 80001fe:	81fb      	strh	r3, [r7, #14]
				set_timer(&timer, TIME_RED);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f80e 	bl	8000228 <set_timer>
 800020c:	e002      	b.n	8000214 <main+0xc8>
			break;
 800020e:	bf00      	nop
 8000210:	e000      	b.n	8000214 <main+0xc8>
			break;
 8000212:	bf00      	nop
			}
		}
		run_timer(&timer);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f816 	bl	8000248 <run_timer>
		HAL_Delay(10);
 800021c:	200a      	movs	r0, #10
 800021e:	f000 f8a5 	bl	800036c <HAL_Delay>
		switch (led_st) {
 8000222:	e79e      	b.n	8000162 <main+0x16>
 8000224:	40010800 	.word	0x40010800

08000228 <set_timer>:
#include"software_timer.h"
void init_timer(struct s_timer *timer) {
	timer->st = 0;
	timer->time = 0;
}
void set_timer(struct s_timer *timer, const unsigned long time) {
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	timer->time = time;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	605a      	str	r2, [r3, #4]
	timer->st = 1;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <run_timer>:
void run_timer(struct s_timer *timer) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	if (timer->time > 0) {
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00b      	beq.n	8000270 <run_timer+0x28>
		timer->time--;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	605a      	str	r2, [r3, #4]
		if (timer->time < 1) {
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d102      	bne.n	8000270 <run_timer+0x28>
			timer->st = 0;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800027e:	e7fe      	b.n	800027e <NMI_Handler+0x4>

08000280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <HardFault_Handler+0x4>

08000286 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800028a:	e7fe      	b.n	800028a <MemManage_Handler+0x4>

0800028c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler+0x4>

08000292 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <UsageFault_Handler+0x4>

08000298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c0:	f000 f838 	bl	8000334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <TIM2_IRQHandler+0x10>)
 80002ce:	f000 f889 	bl	80003e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000020 	.word	0x20000020

080002dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002e8:	f7ff fff8 	bl	80002dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002ee:	490c      	ldr	r1, [pc, #48]	; (8000320 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002f0:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000304:	4c09      	ldr	r4, [pc, #36]	; (800032c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f9af 	bl	8000674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff19 	bl	800014c <main>
  bx lr
 800031a:	4770      	bx	lr
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000324:	080006dc 	.word	0x080006dc
  ldr r2, =_sbss
 8000328:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800032c:	2000006c 	.word	0x2000006c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <HAL_IncTick+0x1c>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <HAL_IncTick+0x20>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4413      	add	r3, r2
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <HAL_IncTick+0x20>)
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	20000000 	.word	0x20000000
 8000354:	20000068 	.word	0x20000068

08000358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  return uwTick;
 800035c:	4b02      	ldr	r3, [pc, #8]	; (8000368 <HAL_GetTick+0x10>)
 800035e:	681b      	ldr	r3, [r3, #0]
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000068 	.word	0x20000068

0800036c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000374:	f7ff fff0 	bl	8000358 <HAL_GetTick>
 8000378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000384:	d005      	beq.n	8000392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <HAL_Delay+0x44>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	4413      	add	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000392:	bf00      	nop
 8000394:	f7ff ffe0 	bl	8000358 <HAL_GetTick>
 8000398:	4602      	mov	r2, r0
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	68fa      	ldr	r2, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d8f7      	bhi.n	8000394 <HAL_Delay+0x28>
  {
  }
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000

080003b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	807b      	strh	r3, [r7, #2]
 80003c0:	4613      	mov	r3, r2
 80003c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80003c4:	787b      	ldrb	r3, [r7, #1]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d003      	beq.n	80003d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80003ca:	887a      	ldrh	r2, [r7, #2]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80003d0:	e003      	b.n	80003da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003d2:	887b      	ldrh	r3, [r7, #2]
 80003d4:	041a      	lsls	r2, r3, #16
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d122      	bne.n	8000440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f003 0302 	and.w	r3, r3, #2
 8000404:	2b02      	cmp	r3, #2
 8000406:	d11b      	bne.n	8000440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f06f 0202 	mvn.w	r2, #2
 8000410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 f8f6 	bl	8000618 <HAL_TIM_IC_CaptureCallback>
 800042c:	e005      	b.n	800043a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 f8e9 	bl	8000606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f8f8 	bl	800062a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2200      	movs	r2, #0
 800043e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	2b04      	cmp	r3, #4
 800044c:	d122      	bne.n	8000494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	2b04      	cmp	r3, #4
 800045a:	d11b      	bne.n	8000494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f06f 0204 	mvn.w	r2, #4
 8000464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2202      	movs	r2, #2
 800046a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000476:	2b00      	cmp	r3, #0
 8000478:	d003      	beq.n	8000482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f000 f8cc 	bl	8000618 <HAL_TIM_IC_CaptureCallback>
 8000480:	e005      	b.n	800048e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f000 f8bf 	bl	8000606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 f8ce 	bl	800062a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	f003 0308 	and.w	r3, r3, #8
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d122      	bne.n	80004e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	2b08      	cmp	r3, #8
 80004ae:	d11b      	bne.n	80004e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f06f 0208 	mvn.w	r2, #8
 80004b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2204      	movs	r2, #4
 80004be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 f8a2 	bl	8000618 <HAL_TIM_IC_CaptureCallback>
 80004d4:	e005      	b.n	80004e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 f895 	bl	8000606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f8a4 	bl	800062a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	f003 0310 	and.w	r3, r3, #16
 80004f2:	2b10      	cmp	r3, #16
 80004f4:	d122      	bne.n	800053c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	2b10      	cmp	r3, #16
 8000502:	d11b      	bne.n	800053c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f06f 0210 	mvn.w	r2, #16
 800050c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2208      	movs	r2, #8
 8000512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f878 	bl	8000618 <HAL_TIM_IC_CaptureCallback>
 8000528:	e005      	b.n	8000536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f86b 	bl	8000606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f87a 	bl	800062a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b01      	cmp	r3, #1
 8000548:	d10e      	bne.n	8000568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b01      	cmp	r3, #1
 8000556:	d107      	bne.n	8000568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f06f 0201 	mvn.w	r2, #1
 8000560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f846 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	2b80      	cmp	r3, #128	; 0x80
 8000574:	d10e      	bne.n	8000594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000580:	2b80      	cmp	r3, #128	; 0x80
 8000582:	d107      	bne.n	8000594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800058c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f866 	bl	8000660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059e:	2b40      	cmp	r3, #64	; 0x40
 80005a0:	d10e      	bne.n	80005c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ac:	2b40      	cmp	r3, #64	; 0x40
 80005ae:	d107      	bne.n	80005c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80005b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f83e 	bl	800063c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	f003 0320 	and.w	r3, r3, #32
 80005ca:	2b20      	cmp	r3, #32
 80005cc:	d10e      	bne.n	80005ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	2b20      	cmp	r3, #32
 80005da:	d107      	bne.n	80005ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f06f 0220 	mvn.w	r2, #32
 80005e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f831 	bl	800064e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
	...

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2600      	movs	r6, #0
 8000678:	4d0c      	ldr	r5, [pc, #48]	; (80006ac <__libc_init_array+0x38>)
 800067a:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <__libc_init_array+0x3c>)
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	42a6      	cmp	r6, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	f000 f81a 	bl	80006bc <_init>
 8000688:	2600      	movs	r6, #0
 800068a:	4d0a      	ldr	r5, [pc, #40]	; (80006b4 <__libc_init_array+0x40>)
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <__libc_init_array+0x44>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	42a6      	cmp	r6, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f855 3b04 	ldr.w	r3, [r5], #4
 800069c:	4798      	blx	r3
 800069e:	3601      	adds	r6, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a6:	4798      	blx	r3
 80006a8:	3601      	adds	r6, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	080006d4 	.word	0x080006d4
 80006b0:	080006d4 	.word	0x080006d4
 80006b4:	080006d4 	.word	0x080006d4
 80006b8:	080006d8 	.word	0x080006d8

080006bc <_init>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr

080006c8 <_fini>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr
